---
- name: Enumerate release files in root directory
  find:
    paths: "{{ releases_path }}"
    patterns: "{{ query('fileglob', releases_pattern) | map('regex_replace', '^.*\\.([\\w]+)$', '*.\\1') | list | unique | join(',') }}"
    excludes: "{{ [ releases_pattern | basename ] | union(releases_keepfiles | default([])) }}"
    file_type: link
  register: releases_release_find

- name: Ensure symlinks exist for current releases
  file:
    src: ".pool/{{ item }}"
    dest: "{{ releases_path }}/{{ item }}"
    owner: "{{ releases_owner }}"
    group: "{{ releases_group }}"
    mode: 0644
    state: link
  loop: "{{ query('fileglob', releases_pattern) | map('basename') | list | union(releases_keepfiles | default([])) }}"
  register: releases_release_files

- name: Enumerate checksums from .pool
  slurp:
    src: "{{ releases_path }}/.pool/{{ item | upper }}S"
  loop: "{{ releases_checksums }}"
  loop_control:
    label: "{{ item | upper }}S"
  register: releases_release_csums

- name: Ensure checksum files has correct content
  copy:
    content: |
      {%- for file in releases_release_files.results | selectattr('src', 'search', 'iso$') -%}
      {{ item.content | b64decode | regex_search('.*' + file.item + '$', multiline=True) }}
      {% endfor -%}
    dest: "{{ releases_path }}/{{ item.item | upper }}S"
    owner: "{{ releases_owner }}"
    group: "{{ releases_group }}"
    mode: 0644
  loop: "{{ releases_release_csums.results }}"
  loop_control:
    label: "{{ item.item | upper }}S"

- name: Ensure no symlinks for previous releases
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ releases_release_find.files | map(attribute='path') | list }}"
  loop_control:
    label: "{{ item | basename }}"
